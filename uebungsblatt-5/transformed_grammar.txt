1. program -> decl_part.																			FIRST=("int","bool",ε)
2.1. decl_part -> decl_part_var decl_part_func.														FIRST=("int","bool",ε)
2.2. decl_part_var -> var_decl decl_part_var | ε.													FIRST=("int","bool",ε)
2.3. decl_part_func -> func_decl decl_part_func_rest.												FIRST=("int","bool")
2.4. decl_part_func_rest -> func_decl decl_part_func_rest | ε.										FIRST=("int","bool",ε)
3. var_decl -> type id_list ";".																	FIRST=("int","bool")
4. type -> "int" | "bool".																			FIRST=("int","bool")
5.1. id_list -> id id_list_rest.																	FIRST=(id)
5.2. id_list_rest -> "," id_list | ε.																FIRST=(",",ε)
6. func_decl -> type id "(" params ")" body.														FIRST=("int","bool")
7. params -> param_list |ε.																			FIRST=("int","bool",ε)
8.1. param_list -> type id param_list_rest.															FIRST=("int","bool")
8.2. param_list_rest -> "," param_list | ε.															FIRST=(",",ε)
9. body -> "{" decl_part_var stmt_sequ "}".															FIRST=("{")
10. stmt_seq -> stmt stmt_seq | ε.																	FIRST=(id,"return","{","if","while",ε)
11. stmt -> simple_stmt ";" | struct_stmt.															FIRST=(id,"return","{","if","while")
12.1. simple_stmt -> assignment_or_func_call | return_stmt.											FIRST=(id,"return")
12.2. assignment_or_func_call -> id assignment_or_func_call_rest.									FIRST=(id)
12.3. assignment_or_func_call_rest -> ":=" expr | ε.												FIRST=(":=",ε)
13. struct_stmt -> comp_stmt | cond | loop.															FIRST=("{","if","while")
14. assignment -> id ":=" expr .																	FIRST=(id)
15.1. cond -> "if" "(" expr ")" "then" stmt cond_rest.												FIRST=("if")
15.2. cond_rest -> "fi" | "else" stmt "fi".															FIRST=("fi","else")
16. loop -> "while" "(" expr ")" stmt .																FIRST=("while")
17. func_call -> id "(" args ")" . 																	FIRST=(id)
18. args -> arg_list | ε.																			FIRST=("true","false",[0-9]+,id,"(","+","-","not",ε)
19.1. arg_list -> expr arg_list_rest.																FIRST=("true","false",[0-9]+,id,"(","+","-","not")
19.2. arg_list_rest -> "," arg_list | ε.															FIRST=(",",ε)
20. return_stmt -> "return" expr .																	FIRST=("return")
21. comp_stmt -> "{" stmt_sequ "}".																	FIRST=("{")
22.1. expr -> simple_expr expr_rest																	FIRST=("true","false",[0-9]+,id,"(","+","-","not")
22.1. expr_rest -> rel_op simple_expr | ε.															FIRST=("=","!","<",">",ε)
23.1. simple_expr -> term simple_expr_rest															FIRST=("true","false",[0-9]+,id,"(","+","-","not")
23.2. simple_expr_rest -> add_op term simple_expr_rest | ε.											FIRST=("+","-","or",ε)
24.1. term -> factor term_rest																		FIRST=("true","false",[0-9]+,id,"(","+","-","not")
24.2. term_rest -> mul_op factor term_rest | ε.														FIRST=("*","/","and",ε)
25.1. factor -> const_val | "(" expr ")" | id_or_func_call |sign factor | "not" factor.				FIRST=("true","false",[0-9]+,id,"(","+","-","not")
25.2. id_or_func_call -> id id_or_func_call_rest.													FIRST=(id)
25.3. id_or_func_call_rest -> "(" args ")" | ε.														FIRST=("(",ε)
26. sign -> "+" | "-".																				FIRST=("+","-")
27. mul_op -> "*" | "/" | "and".																	FIRST=("*","/","and")
28. add_op -> "+" | "-" | "or".																		FIRST=("+","-","or")
29. rel_op -> "=" | "!=" | "<"| "<="| ">"| ">=".													FIRST=("=","!","<",">")
30. const_val -> number | bool_const.																FIRST=("true","false",[0-9]+)
31. number -> [0-9]+.																				FIRST=([0-9]+)
32. bool_const -> "true" | "false".																	FIRST=("true","false")
