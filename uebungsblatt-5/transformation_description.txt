Transformation von 
2. decl_part -> { var_decl } { func_decl }+.
nach
2.1. decl_part -> decl_part_var decl_part_func.
2.2. decl_part_var -> var_decl decl_part_var | ε.
2.3. decl_part_func -> func_decl decl_part_func_rest.
2.4. decl_part_func_rest -> func_decl decl_part_func_rest | ε.
um die EBNF Syntax aufzulösen.

Transformation von
5. id_list -> id "," id_list | id.
nach
5.1. id_list -> id id_list_rest.
5.2. id_list_rest -> "," id_list | ε.
um eine linksfaktorisierte Grammatik zu erhalten (id).

Transformation von
8. param_list -> type id "," param_list | type id.
nach
8.1. param_list -> type id param_list_rest.
8.2. param_list_rest -> "," param_list | ε.
um eine linksfaktorisierte Grammatik zu erhalten (type id).

Transformation von
12. simple_stmt -> assignment | func_call | return_stmt.
nach
12.1. simple_stmt -> assignment_or_func_call | return_stmt.
12.2. assignment_or_func_call -> id assignment_or_func_call_rest.
12.3. assignment_or_func_call_rest -> ":=" expr | ε.
um eine linksfaktorisierte Grammatik zu erhalten (assignment und func_call beginnen mit id)

Transformation von
15. cond -> "if" "(" expr ")" "then" stmt "fi" |"if" "(" expr ")" "then" stmt "else" stmt "fi".
nach
15.1. cond -> "if" "(" expr ")" "then" stmt cond_rest.
15.2. cond_rest -> "fi" | "else" stmt "fi".
um eine linksfaktorisierte Grammatik zu erhalten (if ... then)

Transformation von
19. arg_list -> expr "," arg_list | expr.
nach
19.1. arg_list -> expr arg_list_rest.
19.2. arg_list_rest -> "," arg_list | ε.
um eine linksfaktorisierte Grammatik zu erhalten (expr)

Transformation von 
22. expr -> simple_expr [rel_op simple_expr].
nach
22.1. expr -> simple_expr expr_rest
22.1. expr_rest -> rel_op simple_expr | ε.
um die EBNF Syntax aufzulösen

Transformation von 
23. simple_expr -> term {add_op term}.
nach
23.1. simple_expr -> term simple_expr_rest
23.2. simple_expr_rest -> add_op term simple_expr_rest | ε.
um die EBNF Syntax aufzulösen

Transformation von 
24. term -> factor {mul_op factor}.
nach
24.1. term -> factor term_rest
24.2. term_rest -> mul_op factor term_rest | ε.
um die EBNF Syntax aufzulösen

Transformation von 
25. factor -> const_val | id | "(" expr ")" | func_call |sign factor | "not" factor.
nach
25.1. factor -> const_val | "(" expr ")" | id_or_func_call |sign factor | "not" factor.
25.2. id_or_func_call -> id id_or_func_call_rest.
25.3. id_or_func_call_rest -> "(" args ")" | ε.
um eine linksfaktorisierte Grammatik zu erhalten (factor und func_call beginnt mit id)
